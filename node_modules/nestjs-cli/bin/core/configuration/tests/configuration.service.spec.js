"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const configuration_service_1 = require("../configuration.service");
const chai_1 = require("chai");
const sinon = require("sinon");
const file_system_utils_1 = require("../../utils/file-system.utils");
const path = require("path");
describe('ConfigurationService', () => {
    let sandbox;
    beforeEach(() => sandbox = sinon.sandbox.create());
    afterEach(() => sandbox.restore());
    describe('#load()', () => {
        let readFileStub;
        let setStub;
        beforeEach(() => {
            readFileStub = sandbox.stub(file_system_utils_1.FileSystemUtils, 'readFile').callsFake(() => Promise.resolve('{"key": "value"}'));
            setStub = sandbox.stub(Map.prototype, 'set');
        });
        it('should read the property file', () => {
            return configuration_service_1.ConfigurationService.load()
                .then(() => {
                sinon.assert.calledWith(readFileStub, path.join(process.cwd(), 'nestconfig.json'));
            });
        });
        it('should parse the property file to fill the property Map', () => {
            return configuration_service_1.ConfigurationService.load()
                .then(() => {
                sinon.assert.calledWith(setStub, 'key', 'value');
            });
        });
    });
    describe('#getProperty()', () => {
        let getStub;
        beforeEach(() => getStub = sandbox.stub(Map.prototype, 'get'));
        it('should return the asked property', () => {
            getStub.callsFake(() => 'ts');
            chai_1.expect(configuration_service_1.ConfigurationService.getProperty('language')).to.be.equal('ts');
        });
        it('should throws an exception to indicate a missing property', () => {
            getStub.callsFake(() => undefined);
            chai_1.expect(() => configuration_service_1.ConfigurationService.getProperty('language')).to.throw('Missing property "language"');
        });
    });
});
