"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sinon = require("sinon");
const path = require("path");
const git_repository_1 = require("../git.repository");
const git_utils_1 = require("../../../utils/git.utils");
const file_system_utils_1 = require("../../../utils/file-system.utils");
describe('GitRepository', () => {
    let sandbox;
    beforeEach(() => sandbox = sinon.sandbox.create());
    afterEach(() => sandbox.restore());
    let repository;
    beforeEach(() => repository = new git_repository_1.GitRepository('remote', 'destination'));
    let cloneStub;
    let rmdirStub;
    let rmStub;
    beforeEach(() => {
        cloneStub = sandbox.stub(git_utils_1.GitUtils, 'clone').callsFake(() => Promise.resolve());
        rmdirStub = sandbox.stub(file_system_utils_1.FileSystemUtils, 'rmdir').callsFake(() => Promise.resolve());
        rmStub = sandbox.stub(file_system_utils_1.FileSystemUtils, 'rm').callsFake(() => Promise.resolve());
    });
    describe('#clone()', () => {
        it('should clone the git remote repository to destination', () => {
            return repository.clone()
                .then(() => {
                sinon.assert.calledWith(cloneStub, 'remote', 'destination');
            });
        });
        it('should remove the .git folder from destination', () => {
            return repository.clone()
                .then(() => {
                sinon.assert.calledWith(rmdirStub, path.join('destination', '.git'));
            });
        });
        it('should remove the .gitignore file from destination', () => {
            return repository.clone()
                .then(() => {
                sinon.assert.calledWith(rmStub, path.join('destination', '.gitignore'));
            });
        });
    });
});
