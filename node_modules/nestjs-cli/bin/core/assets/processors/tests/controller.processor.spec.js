"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const asset_generator_1 = require("../../generators/asset.generator");
const sinon = require("sinon");
const path = require("path");
const controller_processor_1 = require("../controller.processor");
const module_updater_1 = require("../../module-updaters/module.updater");
describe('ControllerProcessor', () => {
    const name = 'name';
    const extension = 'ts';
    let sandbox;
    beforeEach(() => sandbox = sinon.sandbox.create());
    afterEach(() => sandbox.restore());
    let processor;
    beforeEach(() => processor = new controller_processor_1.ControllerProcessor(name, extension));
    let generateStub;
    let updateStub;
    beforeEach(() => {
        generateStub = sandbox.stub(asset_generator_1.AssetGenerator.prototype, 'generate').callsFake(() => Promise.resolve());
        updateStub = sandbox.stub(module_updater_1.ModuleUpdaterImpl.prototype, 'update').callsFake(() => Promise.resolve());
    });
    describe('#process()', () => {
        const assets = [
            {
                filename: path.join(process.cwd(), 'src/app/modules/', 'name/name.controller.ts'),
                className: 'NameController',
                template: {
                    filename: path.resolve(__dirname, '../../../../assets/ts/controller/controller.ts.template'),
                    replacer: {
                        __CLASS_NAME__: 'NameController'
                    }
                }
            },
            {
                filename: path.join(process.cwd(), 'src/app/modules/', 'name/name.controller.spec.ts'),
                className: 'NameController',
                template: {
                    filename: path.resolve(__dirname, '../../../../assets/ts/controller/controller.spec.ts.template'),
                    replacer: {
                        __CLASS_NAME__: 'NameController',
                        __IMPORT__: 'name.controller.ts'
                    }
                }
            }
        ];
        it('should generate component assets', () => {
            return processor.process()
                .then(() => {
                sinon.assert.calledWith(generateStub, assets[0]);
                sinon.assert.calledWith(generateStub, assets[1]);
            });
        });
        it('should update the nearest parent module', () => {
            return processor.process()
                .then(() => {
                sinon.assert.calledWith(updateStub, assets[0].filename, assets[0].className);
            });
        });
    });
});
