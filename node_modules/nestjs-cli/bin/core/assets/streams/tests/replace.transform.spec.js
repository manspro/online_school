"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const test_utils_1 = require("./test.utils");
const replace_transform_1 = require("../replace.transform");
describe('ReplaceTransform', () => {
    it('should replace data in the stream', done => {
        const reader = new test_utils_1.BufferedReadable(Buffer.from('class __CLASS_NAME__'));
        const replacer = {
            __CLASS_NAME__: 'value'
        };
        const transformer = new replace_transform_1.ReplaceTransform(replacer);
        const writer = new test_utils_1.BufferedWritable();
        reader.on('end', () => {
            chai_1.expect(writer.getBuffer().toString()).to.be.equal('class value');
            done();
        });
        reader
            .pipe(transformer)
            .pipe(writer);
    });
    it('should replace multiple same data in the stream', done => {
        const reader = new test_utils_1.BufferedReadable(Buffer.from('__CLASS_NAME__\n__CLASS_NAME__'));
        const replacer = {
            __CLASS_NAME__: 'value'
        };
        const transformer = new replace_transform_1.ReplaceTransform(replacer);
        const writer = new test_utils_1.BufferedWritable();
        reader.on('end', () => {
            chai_1.expect(writer.getBuffer().toString()).to.be.equal('value\nvalue');
            done();
        });
        reader
            .pipe(transformer)
            .pipe(writer);
    });
    it('should replace multiple replace data in the stream', done => {
        const reader = new test_utils_1.BufferedReadable(Buffer.from('__CLASS_NAME__\n__IMPORT__'));
        const replacer = {
            __CLASS_NAME__: 'className',
            __IMPORT__: 'import'
        };
        const transformer = new replace_transform_1.ReplaceTransform(replacer);
        const writer = new test_utils_1.BufferedWritable();
        reader.on('end', () => {
            chai_1.expect(writer.getBuffer().toString()).to.be.equal('className\nimport');
            done();
        });
        reader
            .pipe(transformer)
            .pipe(writer);
    });
});
