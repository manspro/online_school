"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_service_1 = require("../../logger/logger.service");
const module_finder_1 = require("../module-finders/module.finder");
const path = require("path");
const color_service_1 = require("../../logger/color.service");
const file_system_utils_1 = require("../../utils/file-system.utils");
const fs = require("fs");
const metadata_transform_1 = require("../streams/metadata.transform");
const import_transform_1 = require("../streams/import.transform");
const path_utils_1 = require("../../utils/path.utils");
class ModuleUpdaterImpl {
    constructor() {
        this.finder = new module_finder_1.ModuleFinderImpl();
        this.logger = logger_service_1.LoggerService.getLogger();
    }
    update(filename, className, asset) {
        return new Promise((resolve, reject) => {
            this.finder.findFrom(filename)
                .then(moduleFilename => {
                const relativeAssetModuleFilename = path_utils_1.PathUtils.relative(moduleFilename, filename);
                const reader = fs.createReadStream(moduleFilename);
                const intermediateWriter = fs.createWriteStream(`${moduleFilename}.lock`);
                reader
                    .pipe(new import_transform_1.ImportTransform(className, relativeAssetModuleFilename))
                    .pipe(new metadata_transform_1.MetadataTransform(className, asset))
                    .pipe(intermediateWriter);
                reader.on('end', () => {
                    const intermediateReader = fs.createReadStream(`${moduleFilename}.lock`);
                    const writer = fs.createWriteStream(moduleFilename);
                    intermediateReader.pipe(writer);
                    intermediateReader.on('end', () => {
                        file_system_utils_1.FileSystemUtils.rm(`${moduleFilename}.lock`)
                            .then(() => this.logger.info(color_service_1.ColorService.yellow('update'), `${path.relative(process.cwd(), moduleFilename)}`))
                            .then(() => resolve())
                            .catch(error => reject(error));
                    });
                });
            });
        });
    }
}
exports.ModuleUpdaterImpl = ModuleUpdaterImpl;
