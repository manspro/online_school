"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const asset_enum_1 = require("../../../../common/asset/enums/asset.enum");
const file_name_builder_1 = require("../file-name.builder");
describe('FileNameBuilder', () => {
    let builder;
    beforeEach(() => {
        builder = new file_name_builder_1.FileNameBuilder();
    });
    describe('#addName()', () => {
        it('can call addName()', () => {
            builder.addName('name');
        });
    });
    describe('#addAsset()', () => {
        it('can call addAsset()', () => {
            builder.addAsset(asset_enum_1.AssetEnum.MODULE);
        });
    });
    describe('#addTest()', () => {
        it('can call addTest()', () => {
            builder.addTest(false);
        });
    });
    describe('#addExtension()', () => {
        it('can call addExtension()', () => {
            builder.addExtension('ts');
        });
    });
    describe('#build()', () => {
        context('simple names', () => {
            it('should build a module file name', () => {
                chai_1.expect(builder
                    .addName('name')
                    .addAsset(asset_enum_1.AssetEnum.MODULE)
                    .addTest(false)
                    .addExtension('ts')
                    .build()).to.be.equal('name.module.ts');
            });
            it('should build a test module file name', () => {
                chai_1.expect(builder
                    .addName('name')
                    .addAsset(asset_enum_1.AssetEnum.MODULE)
                    .addTest(true)
                    .addExtension('ts')
                    .build()).to.be.equal('name.module.spec.ts');
            });
            it('should build a controller file name', () => {
                chai_1.expect(builder
                    .addName('name')
                    .addAsset(asset_enum_1.AssetEnum.CONTROLLER)
                    .addTest(false)
                    .addExtension('ts')
                    .build()).to.be.equal('name.controller.ts');
            });
            it('should build a test controller file name', () => {
                chai_1.expect(builder
                    .addName('name')
                    .addAsset(asset_enum_1.AssetEnum.CONTROLLER)
                    .addTest(true)
                    .addExtension('ts')
                    .build()).to.be.equal('name.controller.spec.ts');
            });
            it('should builder a component file name', () => {
                chai_1.expect(builder
                    .addName('name')
                    .addAsset(asset_enum_1.AssetEnum.COMPONENT)
                    .addTest(false)
                    .addExtension('ts')
                    .build()).to.be.equal('name.service.ts');
            });
            it('should builder a test component file name', () => {
                chai_1.expect(builder
                    .addName('name')
                    .addAsset(asset_enum_1.AssetEnum.COMPONENT)
                    .addTest(true)
                    .addExtension('ts')
                    .build()).to.be.equal('name.service.spec.ts');
            });
        });
        context.skip('snake case names', () => {
            it('should build a module file name', () => {
                chai_1.expect(builder
                    .addName('snake-name')
                    .addAsset(asset_enum_1.AssetEnum.MODULE)
                    .addTest(false)
                    .addExtension('ts')
                    .build()).to.be.equal('snake-name.module.ts');
            });
        });
        context('name from path', () => {
            it('should build a module file name', () => {
                chai_1.expect(builder
                    .addName('path/to/asset')
                    .addAsset(asset_enum_1.AssetEnum.MODULE)
                    .addTest(false)
                    .addExtension('ts')
                    .build()).to.be.equal('asset.module.ts');
            });
        });
    });
});
