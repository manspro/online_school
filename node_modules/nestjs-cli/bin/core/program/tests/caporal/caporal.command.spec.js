"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const caporal_1 = require("../../caporal");
const sinon = require("sinon");
const chai_1 = require("chai");
const caporal = require("caporal");
describe('CaporalCommand', () => {
    let sandbox;
    beforeEach(() => {
        sandbox = sinon.sandbox.create();
    });
    afterEach(() => {
        sandbox.restore();
    });
    let staticCaporalCommand;
    beforeEach(() => {
        staticCaporalCommand = caporal.command('name', 'description');
    });
    let command;
    beforeEach(() => {
        command = new caporal_1.CaporalCommand(staticCaporalCommand);
    });
    describe('#alias()', () => {
        it('should call caporal.command.alias()', () => {
            const aliasStub = sandbox.stub(staticCaporalCommand, 'alias');
            command.alias('name');
            chai_1.expect(aliasStub.calledWith('name')).to.be.true;
        });
    });
    describe('#argument()', () => {
        it('should call caporal.command.argument()', () => {
            const argumentStub = sandbox.stub(staticCaporalCommand, 'argument');
            command.argument('name', 'description');
            chai_1.expect(argumentStub.calledWith('name', 'description')).to.be.true;
        });
    });
    describe('#option()', () => {
        it('should call caporal.command.option()', () => {
            const optionStub = sandbox.stub(staticCaporalCommand, 'option');
            command.option('name', 'description');
            chai_1.expect(optionStub.calledWith('name', 'description')).to.be.true;
        });
    });
    describe('#handler()', () => {
        class TestHandler {
            execute(args, options, logger) {
                throw new Error("Method not implemented.");
            }
        }
        it('should call caporal.command.action()', () => {
            const actionStub = sandbox.stub(staticCaporalCommand, 'action');
            const handler = new TestHandler();
            command.handler(handler);
            chai_1.expect(actionStub.calledWith(handler.execute)).to.be.true;
        });
    });
});
