"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const generate_command_handler_1 = require("../generate-command.handler");
const sinon = require("sinon");
const module_processor_1 = require("../../../core/assets/processors/module.processor");
const controller_processor_1 = require("../../../core/assets/processors/controller.processor");
const component_processor_1 = require("../../../core/assets/processors/component.processor");
const configuration_service_1 = require("../../../core/configuration/configuration.service");
describe('GenerateCommandHandler', () => {
    let sandbox;
    beforeEach(() => sandbox = sinon.sandbox.create());
    afterEach(() => sandbox.restore());
    let handler;
    beforeEach(() => {
        handler = new generate_command_handler_1.GenerateCommandHandler();
    });
    let loadStub;
    let getPropertyStub;
    beforeEach(() => {
        loadStub = sandbox.stub(configuration_service_1.ConfigurationService, 'load').callsFake(() => Promise.resolve());
        getPropertyStub = sandbox.stub(configuration_service_1.ConfigurationService, 'getProperty').callsFake(() => 'ts');
    });
    describe('#execute()', () => {
        it('should load the configuration file', () => {
            sandbox.stub(module_processor_1.ModuleProcessor.prototype, 'process').callsFake(() => Promise.resolve());
            return handler.execute({ asset: 'module', name: 'name' }, {}, console)
                .then(() => {
                sinon.assert.calledOnce(loadStub);
            });
        });
        it('should get the project language from the configuration', () => {
            sandbox.stub(module_processor_1.ModuleProcessor.prototype, 'process').callsFake(() => Promise.resolve());
            return handler.execute({ asset: 'module', name: 'name' }, {}, console)
                .then(() => {
                sinon.assert.calledWith(getPropertyStub, 'language');
            });
        });
        it('should generate module assets', () => {
            let processStub = sandbox.stub(module_processor_1.ModuleProcessor.prototype, 'process').callsFake(() => Promise.resolve());
            return handler.execute({ asset: 'module', name: 'name' }, {}, console)
                .then(() => {
                sinon.assert.calledOnce(processStub);
            });
        });
        it('should generate controller assets', () => {
            let processStub = sandbox.stub(controller_processor_1.ControllerProcessor.prototype, 'process').callsFake(() => Promise.resolve());
            return handler.execute({ asset: 'controller', name: 'name' }, {}, console)
                .then(() => {
                sinon.assert.calledOnce(processStub);
            });
        });
        it('should generate component assets', () => {
            let processStub = sandbox.stub(component_processor_1.ComponentProcessor.prototype, 'process').callsFake(() => Promise.resolve());
            return handler.execute({ asset: 'component', name: 'name' }, {}, console)
                .then(() => {
                sinon.assert.calledOnce(processStub);
            });
        });
    });
});
