"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sinon = require("sinon");
const caporal_1 = require("../../../core/program/caporal");
const chai_1 = require("chai");
const create_command_descriptor_1 = require("../create.command-descriptor");
const create_command_handler_1 = require("../../handlers/create-command.handler");
describe('CreateCommandDescriptor', () => {
    let sandbox;
    beforeEach(() => {
        sandbox = sinon.sandbox.create();
    });
    afterEach(() => {
        sandbox.restore();
    });
    let command;
    beforeEach(() => {
        const program = new caporal_1.CaporalProgram();
        command = program.command('name', 'description');
    });
    describe('#declare()', () => {
        let argumentStub;
        let optionStub;
        let handlerStub;
        beforeEach(() => {
            argumentStub = sandbox.stub(command, 'argument').callsFake(() => command);
            optionStub = sandbox.stub(command, 'option').callsFake(() => command);
            handlerStub = sandbox.stub(command, 'handler').callsFake(() => command);
        });
        beforeEach(() => {
            create_command_descriptor_1.CreateCommandDescriptor.declare(command);
        });
        it('should declare the mandatory name argument with the right description', () => {
            chai_1.expect(argumentStub.calledWith('<name>', 'Nest application name')).to.be.true;
        });
        it('should declare the optional destination argument with the right description', () => {
            chai_1.expect(argumentStub.calledWith('[destination]', 'Where the Nest application will be created')).to.be.true;
        });
        it('should declare the repository option with the right description', () => {
            chai_1.expect(optionStub.calledWith('-r, --repository <repository>', 'Github repository where the project template is')).to.be.true;
        });
        it('should call handler() with the CreateCommandHandler', () => {
            chai_1.expect(handlerStub.calledWith(new create_command_handler_1.CreateCommandHandler())).to.be.true;
        });
    });
});
